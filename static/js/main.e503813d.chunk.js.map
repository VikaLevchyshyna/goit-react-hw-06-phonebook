{"version":3,"sources":["components/Filter/Filter.module.css","components/App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","changeFilter","contactsActions","deleteContact","items","createReducer","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","getContacts","getFilter","getVisibleContacts","normalizedFilter","toLowerCase","text","includes","getFiteredContacts","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","className","s","form","onSubmit","preventDefault","find","contact","alert","label","type","pattern","title","input","placeholder","onChange","required","button","ContactList","list","map","item","info","onClick","onDeleteContact","Filter","App","section","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e503813d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1lRgm\",\"input\":\"Filter_input__1cox6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__3iUnt\",\"section\":\"App_section__2Yvjp\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => {\r\n  return {\r\n    payload: {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst changeFilter = createAction('contacts/change');\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst contactsActions = { addContact, deleteContact, changeFilter };\r\n\r\nexport default contactsActions;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\n\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst phonebookPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(phonebookPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const getFiteredContacts = contacts => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(\r\n      text =>\r\n        text &&\r\n        text.name &&\r\n        text.name.toLowerCase &&\r\n        text.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  return getFiteredContacts(contacts);\r\n};\r\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      setName('');\n      setNumber('');\n      return;\n    }\n\n    dispatch(contactsActions.addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          className={s.input}\n          placeholder=\"Jon Jonson\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          placeholder=\"111-11-11\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(contactsActions.deleteContact(id));\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.info}>\n            {name}: {number}\n          </p>\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\n// import { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport s from './App.module.css';\n\nconst App = () => {\n  return (\n    <div>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s.section}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3wUeQ\",\"label\":\"ContactForm_label__1vYTh\",\"input\":\"ContactForm_input__J5Ld9\",\"button\":\"ContactForm_button__32eSH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__ze3i8\",\"item\":\"ContactList_item__3HZLE\",\"button\":\"ContactList_button__3jfzh\"};"],"sourceRoot":""}